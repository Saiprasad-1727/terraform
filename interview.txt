1. What is Terraform, and what is its primary purpose?
Terraform is an Infrastructure as Code (IaC) tool that enables users to define, provision, 
and manage cloud resources using declarative configuration files.

2. How does Terraform differ from other IaC tools like CloudFormation or Ansible?
Terraform vs CloudFormation: Terraform is multi-cloud, whereas CloudFormation is AWS-specific.

Terraform vs Ansible: Terraform manages infrastructure provisioning, while Ansible is primarily for configuration management.

3. What are the key Terraform commands, and what do they do?
terraform init → Initializes Terraform working directory.

terraform plan → Shows changes before applying them.

terraform apply → Deploys the infrastructure.

terraform destroy → Deletes managed resources.

4. What is a Terraform state file?
Terraform uses terraform.tfstate to track current infrastructure. It ensures Terraform knows what resources exist to prevent unintended changes.

5. What are Terraform providers, and why are they important?
Providers (e.g., AWS, Azure, GCP) allow Terraform to interact with APIs of different cloud platforms and services.

6. What are Terraform modules?
Modules are reusable blocks of Terraform configurations that simplify infrastructure management and promote code reuse.

7. How does Terraform manage remote state?
Remote state stores terraform.tfstate in external storage (like S3, Azure Blob, Google Storage) to facilitate team collaboration.

8. What are Terraform workspaces, and when should you use them?
Workspaces allow Terraform to manage multiple environments (e.g., dev, staging, prod) within the same configuration.

9. How does Terraform handle importing existing infrastructure, and what are the limitations?
Terraform can import existing resources using:

bash
terraform import aws_instance.example i-1234567890abcdef0
However, Terraform doesn't generate configuration files, so users must manually define them.

10. What are Terraform provisioners, and when should you use them?
Provisioners execute post-deployment tasks, such as running shell scripts or configuring instances.

11. What is drift detection in Terraform, and how can it be addressed?
Drift detection identifies manual infrastructure changes. Running terraform plan helps detect and fix these drifts.

12. How would you implement a rolling update using Terraform for an application deployed in multiple instances?
Use Auto Scaling Groups in AWS or terraform resource lifecycle settings to achieve zero-downtime rolling updates.

13. How do you handle resource dependencies in Terraform, and what is the role of implicit and explicit dependencies?
Implicit Dependencies: Terraform automatically resolves dependencies based on references.

Explicit Dependencies: Use depends_on to force specific ordering.

14. How do you manage complex multi-cloud deployments with Terraform?
Use multiple providers in a single configuration:

hcl
provider "aws" { region = "us-east-1" }
provider "azure" { }
15. What are the taint and untaint commands in Terraform?
terraform taint resource_name → Forces Terraform to recreate a resource on the next terraform apply.

terraform untaint resource_name → Removes the taint, preventing recreation.

16. What are zero-downtime deployments, and how can Terraform achieve them?
Zero-downtime deployments use blue-green or rolling updates with Load Balancers and Auto Scaling.

17. How do you handle secrets management in Terraform, and what are the best practices?
Use Vault, AWS Secrets Manager, or environment variables to securely manage sensitive data.

Avoid storing secrets in .tfstate.

18. Explain the concept of remote state locking in Terraform and its importance in team collaboration.
Remote state locking prevents simultaneous changes by multiple users, ensuring safe infrastructure updates.
